"""
The `@oneOf` directive is used within the type system definition language
 to indicate:

 - an Input Object is a Oneof Input Object, or
 - an Object Type's Field is a Oneof Field.
"""
directive @oneOf on INPUT_OBJECT

"""
The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response.
"""
directive @cost(
  """
  The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc.
  """
  weight: String!
) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"""A directive to indicate the primary key field of an item."""
directive @primaryKey(
  """The underlying database type."""
  databaseType: String
) on FIELD_DEFINITION

"""The default value to be used when creating an item."""
directive @defaultValue(value: DefaultValue) on FIELD_DEFINITION

"""Indicates that a field is auto generated by the database."""
directive @autoGenerated on FIELD_DEFINITION

"""A directive to indicate the enabled state of a node."""
directive @isEnabled(
  """The enabled state of the query or mutation."""
  enabledValue: Boolean
) on FIELD_DEFINITION

"""
A directive to indicate the type maps to a storable entity not a nested entity.
"""
directive @model(
  """Underlying name of the database entity."""
  name: String
) on OBJECT | FIELD_DEFINITION

"""Order by input for ProductDescription GraphQL type"""
input ProductDescriptionOrderByInput {
  """Order by options for ProductDescriptionID"""
  ProductDescriptionID: OrderBy

  """Order by options for Description"""
  Description: OrderBy

  """Order by options for rowguid"""
  rowguid: OrderBy

  """Order by options for ModifiedDate"""
  ModifiedDate: OrderBy
}

"""Scalar fields available in ErrorLog"""
enum ErrorLogScalarFields {
  ErrorLogID
  ErrorTime
  UserName
  ErrorNumber
  ErrorSeverity
  ErrorState
  ErrorProcedure
  ErrorLine
  ErrorMessage
}

type CustomerAddress {
  CustomerID: Int!
  AddressID: Int!
  AddressType: String
  rowguid: UUID!
  ModifiedDate: DateTime!
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type SalesOrderHeaderConnection {
  """The list of items that matched the filter"""
  items: [SalesOrderHeader!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [SalesOrderHeaderScalarFields!]
  ): [SalesOrderHeaderGroupBy!]!
}

"""Scalar fields available in SalesOrderDetail"""
enum SalesOrderDetailScalarFields {
  SalesOrderID
  SalesOrderDetailID
  OrderQty
  ProductID
  UnitPrice
  UnitPriceDiscount
  rowguid
  ModifiedDate
}

"""Aggregation type for SalesOrderHeader"""
type SalesOrderHeaderAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: SalesOrderHeaderNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: SalesOrderHeaderNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: SalesOrderHeaderNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: SalesOrderHeaderNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: SalesOrderHeaderNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""Fields available for aggregation in vProductAndDescription"""
enum vProductAndDescriptionNumericAggregateFields {
  ProductID
}

"""Filter input for ProductModelProductDescription GraphQL type"""
input ProductModelProductDescriptionFilterInput {
  """Filter options for ProductModelID"""
  ProductModelID: IntFilterInput

  """Filter options for ProductDescriptionID"""
  ProductDescriptionID: IntFilterInput

  """Filter options for Culture"""
  Culture: StringFilterInput

  """Filter options for rowguid"""
  rowguid: UuidFilterInput

  """Filter options for ModifiedDate"""
  ModifiedDate: DateTimeFilterInput

  """Conditions to be treated as AND operations"""
  and: [ProductModelProductDescriptionFilterInput]

  """Conditions to be treated as OR operations"""
  or: [ProductModelProductDescriptionFilterInput]
}

type Address {
  AddressID: Int!
  AddressLine1: String!
  AddressLine2: String
  City: String!
  StateProvince: String
  CountryRegion: String
  PostalCode: String!
  rowguid: UUID!
  ModifiedDate: DateTime!
}

type SalesOrderDetail {
  SalesOrderID: Int!
  SalesOrderDetailID: Int!
  OrderQty: Short!
  ProductID: Int!
  UnitPrice: Decimal!
  UnitPriceDiscount: Decimal!
  rowguid: UUID!
  ModifiedDate: DateTime!
}

"""Order by input for Product GraphQL type"""
input ProductOrderByInput {
  """Order by options for ProductID"""
  ProductID: OrderBy

  """Order by options for Name"""
  Name: OrderBy

  """Order by options for ProductNumber"""
  ProductNumber: OrderBy

  """Order by options for Color"""
  Color: OrderBy

  """Order by options for StandardCost"""
  StandardCost: OrderBy

  """Order by options for ListPrice"""
  ListPrice: OrderBy

  """Order by options for Size"""
  Size: OrderBy

  """Order by options for Weight"""
  Weight: OrderBy

  """Order by options for ProductCategoryID"""
  ProductCategoryID: OrderBy

  """Order by options for ProductModelID"""
  ProductModelID: OrderBy

  """Order by options for SellStartDate"""
  SellStartDate: OrderBy

  """Order by options for SellEndDate"""
  SellEndDate: OrderBy

  """Order by options for DiscontinuedDate"""
  DiscontinuedDate: OrderBy

  """Order by options for ThumbNailPhoto"""
  ThumbNailPhoto: OrderBy

  """Order by options for ThumbnailPhotoFileName"""
  ThumbnailPhotoFileName: OrderBy

  """Order by options for rowguid"""
  rowguid: OrderBy

  """Order by options for ModifiedDate"""
  ModifiedDate: OrderBy
}

"""GroupBy type for CustomerAddress"""
type CustomerAddressGroupBy {
  """Grouped fields from CustomerAddress"""
  fields: CustomerAddress

  """Aggregations for CustomerAddress"""
  aggregations: CustomerAddressAggregations
}

"""Filter input for ProductModel GraphQL type"""
input ProductModelFilterInput {
  """Filter options for ProductModelID"""
  ProductModelID: IntFilterInput

  """Filter options for Name"""
  Name: StringFilterInput

  """Filter options for rowguid"""
  rowguid: UuidFilterInput

  """Filter options for ModifiedDate"""
  ModifiedDate: DateTimeFilterInput

  """Conditions to be treated as AND operations"""
  and: [ProductModelFilterInput]

  """Conditions to be treated as OR operations"""
  or: [ProductModelFilterInput]
}

"""Order by input for vProductAndDescription GraphQL type"""
input vProductAndDescriptionOrderByInput {
  """Order by options for ProductID"""
  ProductID: OrderBy

  """Order by options for Name"""
  Name: OrderBy

  """Order by options for ProductModel"""
  ProductModel: OrderBy

  """Order by options for Culture"""
  Culture: OrderBy

  """Order by options for Description"""
  Description: OrderBy
}

"""Fields available for aggregation in vGetAllCategories"""
enum vGetAllCategoriesNumericAggregateFields {
  ProductCategoryID
}

"""GroupBy type for SalesOrderHeader"""
type SalesOrderHeaderGroupBy {
  """Grouped fields from SalesOrderHeader"""
  fields: SalesOrderHeader

  """Aggregations for SalesOrderHeader"""
  aggregations: SalesOrderHeaderAggregations
}

"""GroupBy type for BuildVersion"""
type BuildVersionGroupBy {
  """Grouped fields from BuildVersion"""
  fields: BuildVersion

  """Aggregations for BuildVersion"""
  aggregations: BuildVersionAggregations
}

"""Scalar fields available in Address"""
enum AddressScalarFields {
  AddressID
  AddressLine1
  AddressLine2
  City
  StateProvince
  CountryRegion
  PostalCode
  rowguid
  ModifiedDate
}

"""Input type for updating SalesOrderHeader"""
input UpdateSalesOrderHeaderInput {
  """Input for field SalesOrderID on type UpdateSalesOrderHeaderInput"""
  SalesOrderID: Int

  """Input for field RevisionNumber on type UpdateSalesOrderHeaderInput"""
  RevisionNumber: Byte

  """Input for field OrderDate on type UpdateSalesOrderHeaderInput"""
  OrderDate: DateTime

  """Input for field DueDate on type UpdateSalesOrderHeaderInput"""
  DueDate: DateTime

  """Input for field ShipDate on type UpdateSalesOrderHeaderInput"""
  ShipDate: DateTime

  """Input for field Status on type UpdateSalesOrderHeaderInput"""
  Status: Byte

  """Input for field OnlineOrderFlag on type UpdateSalesOrderHeaderInput"""
  OnlineOrderFlag: Boolean

  """
  Input for field PurchaseOrderNumber on type UpdateSalesOrderHeaderInput
  """
  PurchaseOrderNumber: String

  """Input for field AccountNumber on type UpdateSalesOrderHeaderInput"""
  AccountNumber: String

  """Input for field CustomerID on type UpdateSalesOrderHeaderInput"""
  CustomerID: Int

  """Input for field ShipToAddressID on type UpdateSalesOrderHeaderInput"""
  ShipToAddressID: Int

  """Input for field BillToAddressID on type UpdateSalesOrderHeaderInput"""
  BillToAddressID: Int

  """Input for field ShipMethod on type UpdateSalesOrderHeaderInput"""
  ShipMethod: String

  """
  Input for field CreditCardApprovalCode on type UpdateSalesOrderHeaderInput
  """
  CreditCardApprovalCode: String

  """Input for field SubTotal on type UpdateSalesOrderHeaderInput"""
  SubTotal: Decimal

  """Input for field TaxAmt on type UpdateSalesOrderHeaderInput"""
  TaxAmt: Decimal

  """Input for field Freight on type UpdateSalesOrderHeaderInput"""
  Freight: Decimal

  """Input for field Comment on type UpdateSalesOrderHeaderInput"""
  Comment: String

  """Input for field rowguid on type UpdateSalesOrderHeaderInput"""
  rowguid: UUID

  """Input for field ModifiedDate on type UpdateSalesOrderHeaderInput"""
  ModifiedDate: DateTime
}

"""GroupBy type for vProductAndDescription"""
type vProductAndDescriptionGroupBy {
  """Grouped fields from vProductAndDescription"""
  fields: vProductAndDescription

  """Aggregations for vProductAndDescription"""
  aggregations: vProductAndDescriptionAggregations
}

"""Scalar fields available in ProductModel"""
enum ProductModelScalarFields {
  ProductModelID
  Name
  rowguid
  ModifiedDate
}

"""Order by input for vGetAllCategories GraphQL type"""
input vGetAllCategoriesOrderByInput {
  """Order by options for ParentProductCategoryName"""
  ParentProductCategoryName: OrderBy

  """Order by options for ProductCategoryName"""
  ProductCategoryName: OrderBy

  """Order by options for ProductCategoryID"""
  ProductCategoryID: OrderBy
}

"""Fields available for aggregation in CustomerAddress"""
enum CustomerAddressNumericAggregateFields {
  CustomerID
  AddressID
}

type vGetAllCategories {
  ParentProductCategoryName: String
  ProductCategoryName: String
  ProductCategoryID: Int
}

"""Input type for creating SalesOrderDetail"""
input CreateSalesOrderDetailInput {
  """Input for field SalesOrderID on type CreateSalesOrderDetailInput"""
  SalesOrderID: Int!

  """Input for field OrderQty on type CreateSalesOrderDetailInput"""
  OrderQty: Short!

  """Input for field ProductID on type CreateSalesOrderDetailInput"""
  ProductID: Int!

  """Input for field UnitPrice on type CreateSalesOrderDetailInput"""
  UnitPrice: Decimal!

  """Input for field UnitPriceDiscount on type CreateSalesOrderDetailInput"""
  UnitPriceDiscount: Decimal = "((0.0))"

  """Input for field rowguid on type CreateSalesOrderDetailInput"""
  rowguid: UUID = "(newid())"

  """Input for field ModifiedDate on type CreateSalesOrderDetailInput"""
  ModifiedDate: DateTime = "(getdate())"
}

"""Scalar fields available in Product"""
enum ProductScalarFields {
  ProductID
  Name
  ProductNumber
  Color
  StandardCost
  ListPrice
  Size
  Weight
  ProductCategoryID
  ProductModelID
  SellStartDate
  SellEndDate
  DiscontinuedDate
  ThumbNailPhoto
  ThumbnailPhotoFileName
  rowguid
  ModifiedDate
}

"""Input type for updating ProductModel"""
input UpdateProductModelInput {
  """Input for field Name on type UpdateProductModelInput"""
  Name: String

  """Input for field rowguid on type UpdateProductModelInput"""
  rowguid: UUID

  """Input for field ModifiedDate on type UpdateProductModelInput"""
  ModifiedDate: DateTime
}

"""Filter input for vGetAllCategories GraphQL type"""
input vGetAllCategoriesFilterInput {
  """Filter options for ParentProductCategoryName"""
  ParentProductCategoryName: StringFilterInput

  """Filter options for ProductCategoryName"""
  ProductCategoryName: StringFilterInput

  """Filter options for ProductCategoryID"""
  ProductCategoryID: IntFilterInput

  """Conditions to be treated as AND operations"""
  and: [vGetAllCategoriesFilterInput]

  """Conditions to be treated as OR operations"""
  or: [vGetAllCategoriesFilterInput]
}

"""Aggregation type for BuildVersion"""
type BuildVersionAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: BuildVersionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: ByteFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: BuildVersionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: ByteFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: BuildVersionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: ByteFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: BuildVersionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: ByteFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: BuildVersionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: ByteFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""Aggregation type for CustomerAddress"""
type CustomerAddressAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: CustomerAddressNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: CustomerAddressNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: CustomerAddressNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: CustomerAddressNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: CustomerAddressNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""Aggregation type for Address"""
type AddressAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: AddressNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: AddressNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: AddressNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: AddressNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: AddressNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""Fields available for aggregation in ProductModelProductDescription"""
enum ProductModelProductDescriptionNumericAggregateFields {
  ProductModelID
  ProductDescriptionID
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type ProductCategoryConnection {
  """The list of items that matched the filter"""
  items: [ProductCategory!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [ProductCategoryScalarFields!]
  ): [ProductCategoryGroupBy!]!
}

"""Input type for updating SalesOrderDetail"""
input UpdateSalesOrderDetailInput {
  """Input for field SalesOrderID on type UpdateSalesOrderDetailInput"""
  SalesOrderID: Int

  """Input for field OrderQty on type UpdateSalesOrderDetailInput"""
  OrderQty: Short

  """Input for field ProductID on type UpdateSalesOrderDetailInput"""
  ProductID: Int

  """Input for field UnitPrice on type UpdateSalesOrderDetailInput"""
  UnitPrice: Decimal

  """Input for field UnitPriceDiscount on type UpdateSalesOrderDetailInput"""
  UnitPriceDiscount: Decimal

  """Input for field rowguid on type UpdateSalesOrderDetailInput"""
  rowguid: UUID

  """Input for field ModifiedDate on type UpdateSalesOrderDetailInput"""
  ModifiedDate: DateTime
}

"""Scalar fields available in ProductDescription"""
enum ProductDescriptionScalarFields {
  ProductDescriptionID
  Description
  rowguid
  ModifiedDate
}

"""IEEE 754 32 bit float"""
scalar Single

"""Aggregation type for Customer"""
type CustomerAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: CustomerNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: CustomerNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: CustomerNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: CustomerNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: CustomerNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""Filter input for vProductAndDescription GraphQL type"""
input vProductAndDescriptionFilterInput {
  """Filter options for ProductID"""
  ProductID: IntFilterInput

  """Filter options for Name"""
  Name: StringFilterInput

  """Filter options for ProductModel"""
  ProductModel: StringFilterInput

  """Filter options for Culture"""
  Culture: StringFilterInput

  """Filter options for Description"""
  Description: StringFilterInput

  """Conditions to be treated as AND operations"""
  and: [vProductAndDescriptionFilterInput]

  """Conditions to be treated as OR operations"""
  or: [vProductAndDescriptionFilterInput]
}

"""Input type for updating Address"""
input UpdateAddressInput {
  """Input for field AddressLine1 on type UpdateAddressInput"""
  AddressLine1: String

  """Input for field AddressLine2 on type UpdateAddressInput"""
  AddressLine2: String

  """Input for field City on type UpdateAddressInput"""
  City: String

  """Input for field StateProvince on type UpdateAddressInput"""
  StateProvince: String

  """Input for field CountryRegion on type UpdateAddressInput"""
  CountryRegion: String

  """Input for field PostalCode on type UpdateAddressInput"""
  PostalCode: String

  """Input for field rowguid on type UpdateAddressInput"""
  rowguid: UUID

  """Input for field ModifiedDate on type UpdateAddressInput"""
  ModifiedDate: DateTime
}

"""GroupBy type for ProductDescription"""
type ProductDescriptionGroupBy {
  """Grouped fields from ProductDescription"""
  fields: ProductDescription

  """Aggregations for ProductDescription"""
  aggregations: ProductDescriptionAggregations
}

"""Aggregation type for ProductModel"""
type ProductModelAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: ProductModelNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: ProductModelNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: ProductModelNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: ProductModelNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: ProductModelNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

type Mutation {
  """Creates a new BuildVersion"""
  createBuildVersion(
    """Input representing all the fields for creating BuildVersion"""
    item: CreateBuildVersionInput!
  ): BuildVersion

  """Updates a BuildVersion"""
  updateBuildVersion(
    """The ID of the item being updated."""
    SystemInformationID: Byte!

    """Input representing all the fields for updating BuildVersion"""
    item: UpdateBuildVersionInput!
  ): BuildVersion

  """Delete a BuildVersion"""
  deleteBuildVersion(
    """The ID of the item being deleted."""
    SystemInformationID: Byte!
  ): BuildVersion

  """Creates a new ErrorLog"""
  createErrorLog(
    """Input representing all the fields for creating ErrorLog"""
    item: CreateErrorLogInput!
  ): ErrorLog

  """Updates a ErrorLog"""
  updateErrorLog(
    """The ID of the item being updated."""
    ErrorLogID: Int!

    """Input representing all the fields for updating ErrorLog"""
    item: UpdateErrorLogInput!
  ): ErrorLog

  """Delete a ErrorLog"""
  deleteErrorLog(
    """The ID of the item being deleted."""
    ErrorLogID: Int!
  ): ErrorLog

  """Creates a new Address"""
  createAddress(
    """Input representing all the fields for creating Address"""
    item: CreateAddressInput!
  ): Address

  """Updates a Address"""
  updateAddress(
    """The ID of the item being updated."""
    AddressID: Int!

    """Input representing all the fields for updating Address"""
    item: UpdateAddressInput!
  ): Address

  """Delete a Address"""
  deleteAddress(
    """The ID of the item being deleted."""
    AddressID: Int!
  ): Address

  """Creates a new Product"""
  createProduct(
    """Input representing all the fields for creating Product"""
    item: CreateProductInput!
  ): Product

  """Updates a Product"""
  updateProduct(
    """The ID of the item being updated."""
    ProductID: Int!

    """Input representing all the fields for updating Product"""
    item: UpdateProductInput!
  ): Product

  """Delete a Product"""
  deleteProduct(
    """The ID of the item being deleted."""
    ProductID: Int!
  ): Product

  """Creates a new SalesOrderDetail"""
  createSalesOrderDetail(
    """Input representing all the fields for creating SalesOrderDetail"""
    item: CreateSalesOrderDetailInput!
  ): SalesOrderDetail

  """Updates a SalesOrderDetail"""
  updateSalesOrderDetail(
    """One of the ids of the item being updated."""
    SalesOrderID: Int!

    """One of the ids of the item being updated."""
    SalesOrderDetailID: Int!

    """Input representing all the fields for updating SalesOrderDetail"""
    item: UpdateSalesOrderDetailInput!
  ): SalesOrderDetail

  """Delete a SalesOrderDetail"""
  deleteSalesOrderDetail(
    """One of the ids of the item being deleted."""
    SalesOrderID: Int!

    """One of the ids of the item being deleted."""
    SalesOrderDetailID: Int!
  ): SalesOrderDetail

  """Creates a new ProductModelProductDescription"""
  createProductModelProductDescription(
    """
    Input representing all the fields for creating ProductModelProductDescription
    """
    item: CreateProductModelProductDescriptionInput!
  ): ProductModelProductDescription

  """Updates a ProductModelProductDescription"""
  updateProductModelProductDescription(
    """One of the ids of the item being updated."""
    ProductModelID: Int!

    """One of the ids of the item being updated."""
    ProductDescriptionID: Int!

    """One of the ids of the item being updated."""
    Culture: String!

    """
    Input representing all the fields for updating ProductModelProductDescription
    """
    item: UpdateProductModelProductDescriptionInput!
  ): ProductModelProductDescription

  """Delete a ProductModelProductDescription"""
  deleteProductModelProductDescription(
    """One of the ids of the item being deleted."""
    ProductModelID: Int!

    """One of the ids of the item being deleted."""
    ProductDescriptionID: Int!

    """One of the ids of the item being deleted."""
    Culture: String!
  ): ProductModelProductDescription

  """Creates a new SalesOrderHeader"""
  createSalesOrderHeader(
    """Input representing all the fields for creating SalesOrderHeader"""
    item: CreateSalesOrderHeaderInput!
  ): SalesOrderHeader

  """Updates a SalesOrderHeader"""
  updateSalesOrderHeader(
    """The ID of the item being updated."""
    SalesOrderID: Int!

    """Input representing all the fields for updating SalesOrderHeader"""
    item: UpdateSalesOrderHeaderInput!
  ): SalesOrderHeader

  """Delete a SalesOrderHeader"""
  deleteSalesOrderHeader(
    """The ID of the item being deleted."""
    SalesOrderID: Int!
  ): SalesOrderHeader

  """Creates a new Customer"""
  createCustomer(
    """Input representing all the fields for creating Customer"""
    item: CreateCustomerInput!
  ): Customer

  """Updates a Customer"""
  updateCustomer(
    """The ID of the item being updated."""
    CustomerID: Int!

    """Input representing all the fields for updating Customer"""
    item: UpdateCustomerInput!
  ): Customer

  """Delete a Customer"""
  deleteCustomer(
    """The ID of the item being deleted."""
    CustomerID: Int!
  ): Customer

  """Creates a new ProductDescription"""
  createProductDescription(
    """Input representing all the fields for creating ProductDescription"""
    item: CreateProductDescriptionInput!
  ): ProductDescription

  """Updates a ProductDescription"""
  updateProductDescription(
    """The ID of the item being updated."""
    ProductDescriptionID: Int!

    """Input representing all the fields for updating ProductDescription"""
    item: UpdateProductDescriptionInput!
  ): ProductDescription

  """Delete a ProductDescription"""
  deleteProductDescription(
    """The ID of the item being deleted."""
    ProductDescriptionID: Int!
  ): ProductDescription

  """Creates a new ProductModel"""
  createProductModel(
    """Input representing all the fields for creating ProductModel"""
    item: CreateProductModelInput!
  ): ProductModel

  """Updates a ProductModel"""
  updateProductModel(
    """The ID of the item being updated."""
    ProductModelID: Int!

    """Input representing all the fields for updating ProductModel"""
    item: UpdateProductModelInput!
  ): ProductModel

  """Delete a ProductModel"""
  deleteProductModel(
    """The ID of the item being deleted."""
    ProductModelID: Int!
  ): ProductModel

  """Creates a new CustomerAddress"""
  createCustomerAddress(
    """Input representing all the fields for creating CustomerAddress"""
    item: CreateCustomerAddressInput!
  ): CustomerAddress

  """Updates a CustomerAddress"""
  updateCustomerAddress(
    """One of the ids of the item being updated."""
    CustomerID: Int!

    """One of the ids of the item being updated."""
    AddressID: Int!

    """Input representing all the fields for updating CustomerAddress"""
    item: UpdateCustomerAddressInput!
  ): CustomerAddress

  """Delete a CustomerAddress"""
  deleteCustomerAddress(
    """One of the ids of the item being deleted."""
    CustomerID: Int!

    """One of the ids of the item being deleted."""
    AddressID: Int!
  ): CustomerAddress

  """Creates a new ProductCategory"""
  createProductCategory(
    """Input representing all the fields for creating ProductCategory"""
    item: CreateProductCategoryInput!
  ): ProductCategory

  """Updates a ProductCategory"""
  updateProductCategory(
    """The ID of the item being updated."""
    ProductCategoryID: Int!

    """Input representing all the fields for updating ProductCategory"""
    item: UpdateProductCategoryInput!
  ): ProductCategory

  """Delete a ProductCategory"""
  deleteProductCategory(
    """The ID of the item being deleted."""
    ProductCategoryID: Int!
  ): ProductCategory

  """Execute Stored-Procedure uspLogError and get results from the database"""
  executeuspLogError(
    """parameters for uspLogError stored-procedure"""
    ErrorLogID: Int
  ): [uspLogError!]!
}

"""Input type for adding Uuid filters"""
input UuidFilterInput {
  """Equals"""
  eq: UUID

  """Contains"""
  contains: UUID

  """Not Contains"""
  notContains: UUID

  """Starts With"""
  startsWith: UUID

  """Ends With"""
  endsWith: UUID

  """Not Equals"""
  neq: UUID

  """Not null test"""
  isNull: Boolean

  """In"""
  in: [UUID]
}

"""Fields available for aggregation in ProductDescription"""
enum ProductDescriptionNumericAggregateFields {
  ProductDescriptionID
}

type ProductModel {
  ProductModelID: Int!
  Name: String
  rowguid: UUID!
  ModifiedDate: DateTime!
}

"""Scalar fields available in vGetAllCategories"""
enum vGetAllCategoriesScalarFields {
  ParentProductCategoryName
  ProductCategoryName
  ProductCategoryID
}

"""Scalar fields available in vProductAndDescription"""
enum vProductAndDescriptionScalarFields {
  ProductID
  Name
  ProductModel
  Culture
  Description
}

"""Aggregation type for ProductCategory"""
type ProductCategoryAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: ProductCategoryNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: ProductCategoryNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: ProductCategoryNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: ProductCategoryNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: ProductCategoryNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""Order by input for Customer GraphQL type"""
input CustomerOrderByInput {
  """Order by options for CustomerID"""
  CustomerID: OrderBy

  """Order by options for NameStyle"""
  NameStyle: OrderBy

  """Order by options for Title"""
  Title: OrderBy

  """Order by options for FirstName"""
  FirstName: OrderBy

  """Order by options for MiddleName"""
  MiddleName: OrderBy

  """Order by options for LastName"""
  LastName: OrderBy

  """Order by options for Suffix"""
  Suffix: OrderBy

  """Order by options for CompanyName"""
  CompanyName: OrderBy

  """Order by options for SalesPerson"""
  SalesPerson: OrderBy

  """Order by options for EmailAddress"""
  EmailAddress: OrderBy

  """Order by options for Phone"""
  Phone: OrderBy

  """Order by options for PasswordHash"""
  PasswordHash: OrderBy

  """Order by options for PasswordSalt"""
  PasswordSalt: OrderBy

  """Order by options for rowguid"""
  rowguid: OrderBy

  """Order by options for ModifiedDate"""
  ModifiedDate: OrderBy
}

"""Scalar fields available in CustomerAddress"""
enum CustomerAddressScalarFields {
  CustomerID
  AddressID
  AddressType
  rowguid
  ModifiedDate
}

type ProductModelProductDescription {
  ProductModelID: Int!
  ProductDescriptionID: Int!
  Culture: String!
  rowguid: UUID!
  ModifiedDate: DateTime!
}

"""Input type for creating CustomerAddress"""
input CreateCustomerAddressInput {
  """Input for field CustomerID on type CreateCustomerAddressInput"""
  CustomerID: Int!

  """Input for field AddressID on type CreateCustomerAddressInput"""
  AddressID: Int!

  """Input for field AddressType on type CreateCustomerAddressInput"""
  AddressType: String

  """Input for field rowguid on type CreateCustomerAddressInput"""
  rowguid: UUID = "(newid())"

  """Input for field ModifiedDate on type CreateCustomerAddressInput"""
  ModifiedDate: DateTime = "(getdate())"
}

"""Input type for creating Customer"""
input CreateCustomerInput {
  """Input for field NameStyle on type CreateCustomerInput"""
  NameStyle: Boolean

  """Input for field Title on type CreateCustomerInput"""
  Title: String

  """Input for field FirstName on type CreateCustomerInput"""
  FirstName: String

  """Input for field MiddleName on type CreateCustomerInput"""
  MiddleName: String

  """Input for field LastName on type CreateCustomerInput"""
  LastName: String

  """Input for field Suffix on type CreateCustomerInput"""
  Suffix: String

  """Input for field CompanyName on type CreateCustomerInput"""
  CompanyName: String

  """Input for field SalesPerson on type CreateCustomerInput"""
  SalesPerson: String

  """Input for field EmailAddress on type CreateCustomerInput"""
  EmailAddress: String

  """Input for field Phone on type CreateCustomerInput"""
  Phone: String

  """Input for field PasswordHash on type CreateCustomerInput"""
  PasswordHash: String!

  """Input for field PasswordSalt on type CreateCustomerInput"""
  PasswordSalt: String!

  """Input for field rowguid on type CreateCustomerInput"""
  rowguid: UUID = "(newid())"

  """Input for field ModifiedDate on type CreateCustomerInput"""
  ModifiedDate: DateTime = "(getdate())"
}

"""Order by input for ProductCategory GraphQL type"""
input ProductCategoryOrderByInput {
  """Order by options for ProductCategoryID"""
  ProductCategoryID: OrderBy

  """Order by options for ParentProductCategoryID"""
  ParentProductCategoryID: OrderBy

  """Order by options for Name"""
  Name: OrderBy

  """Order by options for rowguid"""
  rowguid: OrderBy

  """Order by options for ModifiedDate"""
  ModifiedDate: OrderBy
}

"""Input type for adding String filters"""
input StringFilterInput {
  """Equals"""
  eq: String

  """Contains"""
  contains: String

  """Not Contains"""
  notContains: String

  """Starts With"""
  startsWith: String

  """Ends With"""
  endsWith: String

  """Not Equals"""
  neq: String

  """Not null test"""
  isNull: Boolean

  """In"""
  in: [String]
}

"""Aggregation type for vProductAndDescription"""
type vProductAndDescriptionAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: vProductAndDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: vProductAndDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: vProductAndDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: vProductAndDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: vProductAndDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""GroupBy type for Customer"""
type CustomerGroupBy {
  """Grouped fields from Customer"""
  fields: Customer

  """Aggregations for Customer"""
  aggregations: CustomerAggregations
}

type Query {
  """Get a list of all the BuildVersion items from the database"""
  buildVersions(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: BuildVersionFilterInput

    """Ordering options for query"""
    orderBy: BuildVersionOrderByInput
  ): BuildVersionConnection!

  """Get a BuildVersion from the database by its ID/primary key"""
  buildVersion_by_pk(SystemInformationID: Byte!): BuildVersion

  """Get a list of all the ErrorLog items from the database"""
  errorLogs(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: ErrorLogFilterInput

    """Ordering options for query"""
    orderBy: ErrorLogOrderByInput
  ): ErrorLogConnection!

  """Get a ErrorLog from the database by its ID/primary key"""
  errorLog_by_pk(ErrorLogID: Int!): ErrorLog

  """Get a list of all the vProductAndDescription items from the database"""
  vProductAndDescriptions(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: vProductAndDescriptionFilterInput

    """Ordering options for query"""
    orderBy: vProductAndDescriptionOrderByInput
  ): vProductAndDescriptionConnection!

  """Get a list of all the vGetAllCategories items from the database"""
  vGetAllCategories(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: vGetAllCategoriesFilterInput

    """Ordering options for query"""
    orderBy: vGetAllCategoriesOrderByInput
  ): vGetAllCategoriesConnection!

  """Get a list of all the Address items from the database"""
  addresses(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: AddressFilterInput

    """Ordering options for query"""
    orderBy: AddressOrderByInput
  ): AddressConnection!

  """Get a Address from the database by its ID/primary key"""
  address_by_pk(AddressID: Int!): Address

  """Get a list of all the Product items from the database"""
  products(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: ProductFilterInput

    """Ordering options for query"""
    orderBy: ProductOrderByInput
  ): ProductConnection!

  """Get a Product from the database by its ID/primary key"""
  product_by_pk(ProductID: Int!): Product

  """Get a list of all the SalesOrderDetail items from the database"""
  salesOrderDetails(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: SalesOrderDetailFilterInput

    """Ordering options for query"""
    orderBy: SalesOrderDetailOrderByInput
  ): SalesOrderDetailConnection!

  """Get a SalesOrderDetail from the database by its ID/primary key"""
  salesOrderDetail_by_pk(SalesOrderID: Int!, SalesOrderDetailID: Int!): SalesOrderDetail

  """
  Get a list of all the ProductModelProductDescription items from the database
  """
  productModelProductDescriptions(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: ProductModelProductDescriptionFilterInput

    """Ordering options for query"""
    orderBy: ProductModelProductDescriptionOrderByInput
  ): ProductModelProductDescriptionConnection!

  """
  Get a ProductModelProductDescription from the database by its ID/primary key
  """
  productModelProductDescription_by_pk(ProductModelID: Int!, ProductDescriptionID: Int!, Culture: String!): ProductModelProductDescription

  """Get a list of all the SalesOrderHeader items from the database"""
  salesOrderHeaders(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: SalesOrderHeaderFilterInput

    """Ordering options for query"""
    orderBy: SalesOrderHeaderOrderByInput
  ): SalesOrderHeaderConnection!

  """Get a SalesOrderHeader from the database by its ID/primary key"""
  salesOrderHeader_by_pk(SalesOrderID: Int!): SalesOrderHeader

  """Get a list of all the Customer items from the database"""
  customers(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: CustomerFilterInput

    """Ordering options for query"""
    orderBy: CustomerOrderByInput
  ): CustomerConnection!

  """Get a Customer from the database by its ID/primary key"""
  customer_by_pk(CustomerID: Int!): Customer

  """Get a list of all the ProductDescription items from the database"""
  productDescriptions(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: ProductDescriptionFilterInput

    """Ordering options for query"""
    orderBy: ProductDescriptionOrderByInput
  ): ProductDescriptionConnection!

  """Get a ProductDescription from the database by its ID/primary key"""
  productDescription_by_pk(ProductDescriptionID: Int!): ProductDescription

  """Get a list of all the ProductModel items from the database"""
  productModels(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: ProductModelFilterInput

    """Ordering options for query"""
    orderBy: ProductModelOrderByInput
  ): ProductModelConnection!

  """Get a ProductModel from the database by its ID/primary key"""
  productModel_by_pk(ProductModelID: Int!): ProductModel

  """Get a list of all the CustomerAddress items from the database"""
  customerAddresses(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: CustomerAddressFilterInput

    """Ordering options for query"""
    orderBy: CustomerAddressOrderByInput
  ): CustomerAddressConnection!

  """Get a CustomerAddress from the database by its ID/primary key"""
  customerAddress_by_pk(CustomerID: Int!, AddressID: Int!): CustomerAddress

  """Get a list of all the ProductCategory items from the database"""
  productCategories(
    """The number of items to return from the page start point"""
    first: Int

    """
    A pagination token from a previous query to continue through a paginated list
    """
    after: String

    """Filter options for query"""
    filter: ProductCategoryFilterInput

    """Ordering options for query"""
    orderBy: ProductCategoryOrderByInput
  ): ProductCategoryConnection!

  """Get a ProductCategory from the database by its ID/primary key"""
  productCategory_by_pk(ProductCategoryID: Int!): ProductCategory
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type ProductModelProductDescriptionConnection {
  """The list of items that matched the filter"""
  items: [ProductModelProductDescription!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [ProductModelProductDescriptionScalarFields!]
  ): [ProductModelProductDescriptionGroupBy!]!
}

"""Scalar fields available in ProductCategory"""
enum ProductCategoryScalarFields {
  ProductCategoryID
  ParentProductCategoryID
  Name
  rowguid
  ModifiedDate
}

"""GroupBy type for SalesOrderDetail"""
type SalesOrderDetailGroupBy {
  """Grouped fields from SalesOrderDetail"""
  fields: SalesOrderDetail

  """Aggregations for SalesOrderDetail"""
  aggregations: SalesOrderDetailAggregations
}

"""Order by input for Address GraphQL type"""
input AddressOrderByInput {
  """Order by options for AddressID"""
  AddressID: OrderBy

  """Order by options for AddressLine1"""
  AddressLine1: OrderBy

  """Order by options for AddressLine2"""
  AddressLine2: OrderBy

  """Order by options for City"""
  City: OrderBy

  """Order by options for StateProvince"""
  StateProvince: OrderBy

  """Order by options for CountryRegion"""
  CountryRegion: OrderBy

  """Order by options for PostalCode"""
  PostalCode: OrderBy

  """Order by options for rowguid"""
  rowguid: OrderBy

  """Order by options for ModifiedDate"""
  ModifiedDate: OrderBy
}

"""Aggregation type for vGetAllCategories"""
type vGetAllCategoriesAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: vGetAllCategoriesNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: vGetAllCategoriesNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: vGetAllCategoriesNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: vGetAllCategoriesNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: vGetAllCategoriesNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""Input type for creating BuildVersion"""
input CreateBuildVersionInput {
  """Input for field SystemInformationID on type CreateBuildVersionInput"""
  SystemInformationID: Byte!

  """Input for field DatabaseVersion on type CreateBuildVersionInput"""
  DatabaseVersion: String!

  """Input for field VersionDate on type CreateBuildVersionInput"""
  VersionDate: DateTime!

  """Input for field ModifiedDate on type CreateBuildVersionInput"""
  ModifiedDate: DateTime = "(getdate())"
}

"""Input type for adding ByteArray filters"""
input ByteArrayFilterInput {
  """Not null test"""
  isNull: Boolean
}

"""Scalar fields available in SalesOrderHeader"""
enum SalesOrderHeaderScalarFields {
  SalesOrderID
  RevisionNumber
  OrderDate
  DueDate
  ShipDate
  Status
  OnlineOrderFlag
  PurchaseOrderNumber
  AccountNumber
  CustomerID
  ShipToAddressID
  BillToAddressID
  ShipMethod
  CreditCardApprovalCode
  SubTotal
  TaxAmt
  Freight
  Comment
  rowguid
  ModifiedDate
}

"""Input type for creating ProductModel"""
input CreateProductModelInput {
  """Input for field Name on type CreateProductModelInput"""
  Name: String

  """Input for field rowguid on type CreateProductModelInput"""
  rowguid: UUID = "(newid())"

  """Input for field ModifiedDate on type CreateProductModelInput"""
  ModifiedDate: DateTime = "(getdate())"
}

"""Order by input for CustomerAddress GraphQL type"""
input CustomerAddressOrderByInput {
  """Order by options for CustomerID"""
  CustomerID: OrderBy

  """Order by options for AddressID"""
  AddressID: OrderBy

  """Order by options for AddressType"""
  AddressType: OrderBy

  """Order by options for rowguid"""
  rowguid: OrderBy

  """Order by options for ModifiedDate"""
  ModifiedDate: OrderBy
}

"""Order by input for SalesOrderDetail GraphQL type"""
input SalesOrderDetailOrderByInput {
  """Order by options for SalesOrderID"""
  SalesOrderID: OrderBy

  """Order by options for SalesOrderDetailID"""
  SalesOrderDetailID: OrderBy

  """Order by options for OrderQty"""
  OrderQty: OrderBy

  """Order by options for ProductID"""
  ProductID: OrderBy

  """Order by options for UnitPrice"""
  UnitPrice: OrderBy

  """Order by options for UnitPriceDiscount"""
  UnitPriceDiscount: OrderBy

  """Order by options for rowguid"""
  rowguid: OrderBy

  """Order by options for ModifiedDate"""
  ModifiedDate: OrderBy
}

"""Filter input for BuildVersion GraphQL type"""
input BuildVersionFilterInput {
  """Filter options for SystemInformationID"""
  SystemInformationID: ByteFilterInput

  """Filter options for DatabaseVersion"""
  DatabaseVersion: StringFilterInput

  """Filter options for VersionDate"""
  VersionDate: DateTimeFilterInput

  """Filter options for ModifiedDate"""
  ModifiedDate: DateTimeFilterInput

  """Conditions to be treated as AND operations"""
  and: [BuildVersionFilterInput]

  """Conditions to be treated as OR operations"""
  or: [BuildVersionFilterInput]
}

"""Input type for creating ProductModelProductDescription"""
input CreateProductModelProductDescriptionInput {
  """
  Input for field ProductModelID on type CreateProductModelProductDescriptionInput
  """
  ProductModelID: Int!

  """
  Input for field ProductDescriptionID on type CreateProductModelProductDescriptionInput
  """
  ProductDescriptionID: Int!

  """
  Input for field Culture on type CreateProductModelProductDescriptionInput
  """
  Culture: String!

  """
  Input for field rowguid on type CreateProductModelProductDescriptionInput
  """
  rowguid: UUID = "(newid())"

  """
  Input for field ModifiedDate on type CreateProductModelProductDescriptionInput
  """
  ModifiedDate: DateTime = "(getdate())"
}

"""Fields available for aggregation in ErrorLog"""
enum ErrorLogNumericAggregateFields {
  ErrorLogID
  ErrorNumber
  ErrorSeverity
  ErrorState
  ErrorLine
}

"""Input type for creating Product"""
input CreateProductInput {
  """Input for field Name on type CreateProductInput"""
  Name: String

  """Input for field ProductNumber on type CreateProductInput"""
  ProductNumber: String!

  """Input for field Color on type CreateProductInput"""
  Color: String

  """Input for field StandardCost on type CreateProductInput"""
  StandardCost: Decimal!

  """Input for field ListPrice on type CreateProductInput"""
  ListPrice: Decimal!

  """Input for field Size on type CreateProductInput"""
  Size: String

  """Input for field Weight on type CreateProductInput"""
  Weight: Decimal

  """Input for field ProductCategoryID on type CreateProductInput"""
  ProductCategoryID: Int

  """Input for field ProductModelID on type CreateProductInput"""
  ProductModelID: Int

  """Input for field SellStartDate on type CreateProductInput"""
  SellStartDate: DateTime!

  """Input for field SellEndDate on type CreateProductInput"""
  SellEndDate: DateTime

  """Input for field DiscontinuedDate on type CreateProductInput"""
  DiscontinuedDate: DateTime

  """Input for field ThumbNailPhoto on type CreateProductInput"""
  ThumbNailPhoto: ByteArray

  """Input for field ThumbnailPhotoFileName on type CreateProductInput"""
  ThumbnailPhotoFileName: String

  """Input for field rowguid on type CreateProductInput"""
  rowguid: UUID = "(newid())"

  """Input for field ModifiedDate on type CreateProductInput"""
  ModifiedDate: DateTime = "(getdate())"
}

"""Scalar fields available in BuildVersion"""
enum BuildVersionScalarFields {
  SystemInformationID
  DatabaseVersion
  VersionDate
  ModifiedDate
}

"""Fields available for aggregation in BuildVersion"""
enum BuildVersionNumericAggregateFields {
  SystemInformationID
}

"""Fields available for aggregation in SalesOrderDetail"""
enum SalesOrderDetailNumericAggregateFields {
  SalesOrderID
  SalesOrderDetailID
  OrderQty
  ProductID
  UnitPrice
  UnitPriceDiscount
}

"""Input type for creating Address"""
input CreateAddressInput {
  """Input for field AddressLine1 on type CreateAddressInput"""
  AddressLine1: String!

  """Input for field AddressLine2 on type CreateAddressInput"""
  AddressLine2: String

  """Input for field City on type CreateAddressInput"""
  City: String!

  """Input for field StateProvince on type CreateAddressInput"""
  StateProvince: String

  """Input for field CountryRegion on type CreateAddressInput"""
  CountryRegion: String

  """Input for field PostalCode on type CreateAddressInput"""
  PostalCode: String!

  """Input for field rowguid on type CreateAddressInput"""
  rowguid: UUID = "(newid())"

  """Input for field ModifiedDate on type CreateAddressInput"""
  ModifiedDate: DateTime = "(getdate())"
}

"""Scalar fields available in Customer"""
enum CustomerScalarFields {
  CustomerID
  NameStyle
  Title
  FirstName
  MiddleName
  LastName
  Suffix
  CompanyName
  SalesPerson
  EmailAddress
  Phone
  PasswordHash
  PasswordSalt
  rowguid
  ModifiedDate
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type vProductAndDescriptionConnection {
  """The list of items that matched the filter"""
  items: [vProductAndDescription!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [vProductAndDescriptionScalarFields!]
  ): [vProductAndDescriptionGroupBy!]!
}

"""
The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1.
"""
scalar Short

"""Input type for updating ErrorLog"""
input UpdateErrorLogInput {
  """Input for field ErrorTime on type UpdateErrorLogInput"""
  ErrorTime: DateTime

  """Input for field UserName on type UpdateErrorLogInput"""
  UserName: String

  """Input for field ErrorNumber on type UpdateErrorLogInput"""
  ErrorNumber: Int

  """Input for field ErrorSeverity on type UpdateErrorLogInput"""
  ErrorSeverity: Int

  """Input for field ErrorState on type UpdateErrorLogInput"""
  ErrorState: Int

  """Input for field ErrorProcedure on type UpdateErrorLogInput"""
  ErrorProcedure: String

  """Input for field ErrorLine on type UpdateErrorLogInput"""
  ErrorLine: Int

  """Input for field ErrorMessage on type UpdateErrorLogInput"""
  ErrorMessage: String
}

type Product {
  ProductID: Int!
  Name: String
  ProductNumber: String!
  Color: String
  StandardCost: Decimal!
  ListPrice: Decimal!
  Size: String
  Weight: Decimal
  ProductCategoryID: Int
  ProductModelID: Int
  SellStartDate: DateTime!
  SellEndDate: DateTime
  DiscontinuedDate: DateTime
  ThumbNailPhoto: ByteArray
  ThumbnailPhotoFileName: String
  rowguid: UUID!
  ModifiedDate: DateTime!
}

"""Fields available for aggregation in ProductModel"""
enum ProductModelNumericAggregateFields {
  ProductModelID
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type ProductDescriptionConnection {
  """The list of items that matched the filter"""
  items: [ProductDescription!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [ProductDescriptionScalarFields!]
  ): [ProductDescriptionGroupBy!]!
}

"""Input type for adding Byte filters"""
input ByteFilterInput {
  """Equals"""
  eq: Byte

  """Greater Than"""
  gt: Byte

  """Greater Than or Equal To"""
  gte: Byte

  """Less Than"""
  lt: Byte

  """Less Than or Equal To"""
  lte: Byte

  """Not Equals"""
  neq: Byte

  """Not null test"""
  isNull: Boolean

  """In"""
  in: [Byte]
}

"""Input type for updating CustomerAddress"""
input UpdateCustomerAddressInput {
  """Input for field CustomerID on type UpdateCustomerAddressInput"""
  CustomerID: Int

  """Input for field AddressID on type UpdateCustomerAddressInput"""
  AddressID: Int

  """Input for field AddressType on type UpdateCustomerAddressInput"""
  AddressType: String

  """Input for field rowguid on type UpdateCustomerAddressInput"""
  rowguid: UUID

  """Input for field ModifiedDate on type UpdateCustomerAddressInput"""
  ModifiedDate: DateTime
}

"""Input type for updating ProductCategory"""
input UpdateProductCategoryInput {
  """
  Input for field ParentProductCategoryID on type UpdateProductCategoryInput
  """
  ParentProductCategoryID: Int

  """Input for field Name on type UpdateProductCategoryInput"""
  Name: String

  """Input for field rowguid on type UpdateProductCategoryInput"""
  rowguid: UUID

  """Input for field ModifiedDate on type UpdateProductCategoryInput"""
  ModifiedDate: DateTime
}

"""GroupBy type for ProductCategory"""
type ProductCategoryGroupBy {
  """Grouped fields from ProductCategory"""
  fields: ProductCategory

  """Aggregations for ProductCategory"""
  aggregations: ProductCategoryAggregations
}

type ProductDescription {
  ProductDescriptionID: Int!
  Description: String!
  rowguid: UUID!
  ModifiedDate: DateTime!
}

"""Input type for adding Int filters"""
input IntFilterInput {
  """Equals"""
  eq: Int

  """Greater Than"""
  gt: Int

  """Greater Than or Equal To"""
  gte: Int

  """Less Than"""
  lt: Int

  """Less Than or Equal To"""
  lte: Int

  """Not Equals"""
  neq: Int

  """Not null test"""
  isNull: Boolean

  """In"""
  in: [Int]
}

"""Fields available for aggregation in Customer"""
enum CustomerNumericAggregateFields {
  CustomerID
}

scalar ByteArray

"""Input type for updating BuildVersion"""
input UpdateBuildVersionInput {
  """Input for field SystemInformationID on type UpdateBuildVersionInput"""
  SystemInformationID: Byte

  """Input for field DatabaseVersion on type UpdateBuildVersionInput"""
  DatabaseVersion: String

  """Input for field VersionDate on type UpdateBuildVersionInput"""
  VersionDate: DateTime

  """Input for field ModifiedDate on type UpdateBuildVersionInput"""
  ModifiedDate: DateTime
}

"""Order by input for ErrorLog GraphQL type"""
input ErrorLogOrderByInput {
  """Order by options for ErrorLogID"""
  ErrorLogID: OrderBy

  """Order by options for ErrorTime"""
  ErrorTime: OrderBy

  """Order by options for UserName"""
  UserName: OrderBy

  """Order by options for ErrorNumber"""
  ErrorNumber: OrderBy

  """Order by options for ErrorSeverity"""
  ErrorSeverity: OrderBy

  """Order by options for ErrorState"""
  ErrorState: OrderBy

  """Order by options for ErrorProcedure"""
  ErrorProcedure: OrderBy

  """Order by options for ErrorLine"""
  ErrorLine: OrderBy

  """Order by options for ErrorMessage"""
  ErrorMessage: OrderBy
}

"""Input type for creating ErrorLog"""
input CreateErrorLogInput {
  """Input for field ErrorTime on type CreateErrorLogInput"""
  ErrorTime: DateTime = "(getdate())"

  """Input for field UserName on type CreateErrorLogInput"""
  UserName: String!

  """Input for field ErrorNumber on type CreateErrorLogInput"""
  ErrorNumber: Int!

  """Input for field ErrorSeverity on type CreateErrorLogInput"""
  ErrorSeverity: Int

  """Input for field ErrorState on type CreateErrorLogInput"""
  ErrorState: Int

  """Input for field ErrorProcedure on type CreateErrorLogInput"""
  ErrorProcedure: String

  """Input for field ErrorLine on type CreateErrorLogInput"""
  ErrorLine: Int

  """Input for field ErrorMessage on type CreateErrorLogInput"""
  ErrorMessage: String!
}

"""Filter input for Product GraphQL type"""
input ProductFilterInput {
  """Filter options for ProductID"""
  ProductID: IntFilterInput

  """Filter options for Name"""
  Name: StringFilterInput

  """Filter options for ProductNumber"""
  ProductNumber: StringFilterInput

  """Filter options for Color"""
  Color: StringFilterInput

  """Filter options for StandardCost"""
  StandardCost: DecimalFilterInput

  """Filter options for ListPrice"""
  ListPrice: DecimalFilterInput

  """Filter options for Size"""
  Size: StringFilterInput

  """Filter options for Weight"""
  Weight: DecimalFilterInput

  """Filter options for ProductCategoryID"""
  ProductCategoryID: IntFilterInput

  """Filter options for ProductModelID"""
  ProductModelID: IntFilterInput

  """Filter options for SellStartDate"""
  SellStartDate: DateTimeFilterInput

  """Filter options for SellEndDate"""
  SellEndDate: DateTimeFilterInput

  """Filter options for DiscontinuedDate"""
  DiscontinuedDate: DateTimeFilterInput

  """Filter options for ThumbNailPhoto"""
  ThumbNailPhoto: ByteArrayFilterInput

  """Filter options for ThumbnailPhotoFileName"""
  ThumbnailPhotoFileName: StringFilterInput

  """Filter options for rowguid"""
  rowguid: UuidFilterInput

  """Filter options for ModifiedDate"""
  ModifiedDate: DateTimeFilterInput

  """Conditions to be treated as AND operations"""
  and: [ProductFilterInput]

  """Conditions to be treated as OR operations"""
  or: [ProductFilterInput]
}

"""Filter input for ProductDescription GraphQL type"""
input ProductDescriptionFilterInput {
  """Filter options for ProductDescriptionID"""
  ProductDescriptionID: IntFilterInput

  """Filter options for Description"""
  Description: StringFilterInput

  """Filter options for rowguid"""
  rowguid: UuidFilterInput

  """Filter options for ModifiedDate"""
  ModifiedDate: DateTimeFilterInput

  """Conditions to be treated as AND operations"""
  and: [ProductDescriptionFilterInput]

  """Conditions to be treated as OR operations"""
  or: [ProductDescriptionFilterInput]
}

type ErrorLog {
  ErrorLogID: Int!
  ErrorTime: DateTime!
  UserName: String!
  ErrorNumber: Int!
  ErrorSeverity: Int
  ErrorState: Int
  ErrorProcedure: String
  ErrorLine: Int
  ErrorMessage: String!
}

type uspLogError {
  """Contains output of stored-procedure execution"""
  result: String
}

"""Fields available for aggregation in Address"""
enum AddressNumericAggregateFields {
  AddressID
}

"""Input type for adding Boolean filters"""
input BooleanFilterInput {
  """Equals"""
  eq: Boolean

  """Not Equals"""
  neq: Boolean

  """Not null test"""
  isNull: Boolean

  """In"""
  in: [Boolean]
}

"""Input type for creating ProductCategory"""
input CreateProductCategoryInput {
  """
  Input for field ParentProductCategoryID on type CreateProductCategoryInput
  """
  ParentProductCategoryID: Int

  """Input for field Name on type CreateProductCategoryInput"""
  Name: String

  """Input for field rowguid on type CreateProductCategoryInput"""
  rowguid: UUID = "(newid())"

  """Input for field ModifiedDate on type CreateProductCategoryInput"""
  ModifiedDate: DateTime = "(getdate())"
}

"""Fields available for aggregation in Product"""
enum ProductNumericAggregateFields {
  ProductID
  StandardCost
  ListPrice
  Weight
  ProductCategoryID
  ProductModelID
}

"""Aggregation type for ErrorLog"""
type ErrorLogAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: ErrorLogNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: ErrorLogNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: ErrorLogNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: ErrorLogNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: ErrorLogNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type CustomerAddressConnection {
  """The list of items that matched the filter"""
  items: [CustomerAddress!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [CustomerAddressScalarFields!]
  ): [CustomerAddressGroupBy!]!
}

"""Input type for adding DateTime filters"""
input DateTimeFilterInput {
  """Equals"""
  eq: DateTime

  """Greater Than"""
  gt: DateTime

  """Greater Than or Equal To"""
  gte: DateTime

  """Less Than"""
  lt: DateTime

  """Less Than or Equal To"""
  lte: DateTime

  """Not Equals"""
  neq: DateTime

  """Not null test"""
  isNull: Boolean

  """In"""
  in: [DateTime]
}

type BuildVersion {
  SystemInformationID: Byte!
  DatabaseVersion: String!
  VersionDate: DateTime!
  ModifiedDate: DateTime!
}

"""Order by input for ProductModelProductDescription GraphQL type"""
input ProductModelProductDescriptionOrderByInput {
  """Order by options for ProductModelID"""
  ProductModelID: OrderBy

  """Order by options for ProductDescriptionID"""
  ProductDescriptionID: OrderBy

  """Order by options for Culture"""
  Culture: OrderBy

  """Order by options for rowguid"""
  rowguid: OrderBy

  """Order by options for ModifiedDate"""
  ModifiedDate: OrderBy
}

input DefaultValue {
  Byte: Byte
  Short: Short
  Int: Int
  Long: Long
  String: String
  Boolean: Boolean
  Single: Single
  Float: Float
  Decimal: Decimal
  DateTime: DateTime
  ByteArray: ByteArray
  LocalTime: LocalTime
}

enum OrderBy {
  ASC
  DESC
}

"""Filter input for SalesOrderHeader GraphQL type"""
input SalesOrderHeaderFilterInput {
  """Filter options for SalesOrderID"""
  SalesOrderID: IntFilterInput

  """Filter options for RevisionNumber"""
  RevisionNumber: ByteFilterInput

  """Filter options for OrderDate"""
  OrderDate: DateTimeFilterInput

  """Filter options for DueDate"""
  DueDate: DateTimeFilterInput

  """Filter options for ShipDate"""
  ShipDate: DateTimeFilterInput

  """Filter options for Status"""
  Status: ByteFilterInput

  """Filter options for OnlineOrderFlag"""
  OnlineOrderFlag: BooleanFilterInput

  """Filter options for PurchaseOrderNumber"""
  PurchaseOrderNumber: StringFilterInput

  """Filter options for AccountNumber"""
  AccountNumber: StringFilterInput

  """Filter options for CustomerID"""
  CustomerID: IntFilterInput

  """Filter options for ShipToAddressID"""
  ShipToAddressID: IntFilterInput

  """Filter options for BillToAddressID"""
  BillToAddressID: IntFilterInput

  """Filter options for ShipMethod"""
  ShipMethod: StringFilterInput

  """Filter options for CreditCardApprovalCode"""
  CreditCardApprovalCode: StringFilterInput

  """Filter options for SubTotal"""
  SubTotal: DecimalFilterInput

  """Filter options for TaxAmt"""
  TaxAmt: DecimalFilterInput

  """Filter options for Freight"""
  Freight: DecimalFilterInput

  """Filter options for Comment"""
  Comment: StringFilterInput

  """Filter options for rowguid"""
  rowguid: UuidFilterInput

  """Filter options for ModifiedDate"""
  ModifiedDate: DateTimeFilterInput

  """Conditions to be treated as AND operations"""
  and: [SalesOrderHeaderFilterInput]

  """Conditions to be treated as OR operations"""
  or: [SalesOrderHeaderFilterInput]
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type CustomerConnection {
  """The list of items that matched the filter"""
  items: [Customer!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [CustomerScalarFields!]
  ): [CustomerGroupBy!]!
}

type DbOperationResult {
  """Contains result for mutation execution"""
  result: String
}

"""Input type for updating ProductDescription"""
input UpdateProductDescriptionInput {
  """Input for field Description on type UpdateProductDescriptionInput"""
  Description: String

  """Input for field rowguid on type UpdateProductDescriptionInput"""
  rowguid: UUID

  """Input for field ModifiedDate on type UpdateProductDescriptionInput"""
  ModifiedDate: DateTime
}

"""Order by input for SalesOrderHeader GraphQL type"""
input SalesOrderHeaderOrderByInput {
  """Order by options for SalesOrderID"""
  SalesOrderID: OrderBy

  """Order by options for RevisionNumber"""
  RevisionNumber: OrderBy

  """Order by options for OrderDate"""
  OrderDate: OrderBy

  """Order by options for DueDate"""
  DueDate: OrderBy

  """Order by options for ShipDate"""
  ShipDate: OrderBy

  """Order by options for Status"""
  Status: OrderBy

  """Order by options for OnlineOrderFlag"""
  OnlineOrderFlag: OrderBy

  """Order by options for PurchaseOrderNumber"""
  PurchaseOrderNumber: OrderBy

  """Order by options for AccountNumber"""
  AccountNumber: OrderBy

  """Order by options for CustomerID"""
  CustomerID: OrderBy

  """Order by options for ShipToAddressID"""
  ShipToAddressID: OrderBy

  """Order by options for BillToAddressID"""
  BillToAddressID: OrderBy

  """Order by options for ShipMethod"""
  ShipMethod: OrderBy

  """Order by options for CreditCardApprovalCode"""
  CreditCardApprovalCode: OrderBy

  """Order by options for SubTotal"""
  SubTotal: OrderBy

  """Order by options for TaxAmt"""
  TaxAmt: OrderBy

  """Order by options for Freight"""
  Freight: OrderBy

  """Order by options for Comment"""
  Comment: OrderBy

  """Order by options for rowguid"""
  rowguid: OrderBy

  """Order by options for ModifiedDate"""
  ModifiedDate: OrderBy
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type ProductModelConnection {
  """The list of items that matched the filter"""
  items: [ProductModel!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [ProductModelScalarFields!]
  ): [ProductModelGroupBy!]!
}

"""
LocalTime represents a time of day, with no reference to a particular calendar, time zone, or date.

Allowed patterns:
- `hh:mm:ss.sssssssss`

Examples:
- `20:00:00.999`
"""
scalar LocalTime

scalar UUID

"""Input type for creating SalesOrderHeader"""
input CreateSalesOrderHeaderInput {
  """Input for field SalesOrderID on type CreateSalesOrderHeaderInput"""
  SalesOrderID: Int

  """Input for field RevisionNumber on type CreateSalesOrderHeaderInput"""
  RevisionNumber: Byte = "((0))"

  """Input for field OrderDate on type CreateSalesOrderHeaderInput"""
  OrderDate: DateTime = "(getdate())"

  """Input for field DueDate on type CreateSalesOrderHeaderInput"""
  DueDate: DateTime!

  """Input for field ShipDate on type CreateSalesOrderHeaderInput"""
  ShipDate: DateTime

  """Input for field Status on type CreateSalesOrderHeaderInput"""
  Status: Byte = "((1))"

  """Input for field OnlineOrderFlag on type CreateSalesOrderHeaderInput"""
  OnlineOrderFlag: Boolean

  """
  Input for field PurchaseOrderNumber on type CreateSalesOrderHeaderInput
  """
  PurchaseOrderNumber: String

  """Input for field AccountNumber on type CreateSalesOrderHeaderInput"""
  AccountNumber: String

  """Input for field CustomerID on type CreateSalesOrderHeaderInput"""
  CustomerID: Int!

  """Input for field ShipToAddressID on type CreateSalesOrderHeaderInput"""
  ShipToAddressID: Int

  """Input for field BillToAddressID on type CreateSalesOrderHeaderInput"""
  BillToAddressID: Int

  """Input for field ShipMethod on type CreateSalesOrderHeaderInput"""
  ShipMethod: String!

  """
  Input for field CreditCardApprovalCode on type CreateSalesOrderHeaderInput
  """
  CreditCardApprovalCode: String

  """Input for field SubTotal on type CreateSalesOrderHeaderInput"""
  SubTotal: Decimal = "((0.00))"

  """Input for field TaxAmt on type CreateSalesOrderHeaderInput"""
  TaxAmt: Decimal = "((0.00))"

  """Input for field Freight on type CreateSalesOrderHeaderInput"""
  Freight: Decimal = "((0.00))"

  """Input for field Comment on type CreateSalesOrderHeaderInput"""
  Comment: String

  """Input for field rowguid on type CreateSalesOrderHeaderInput"""
  rowguid: UUID = "(newid())"

  """Input for field ModifiedDate on type CreateSalesOrderHeaderInput"""
  ModifiedDate: DateTime = "(getdate())"
}

"""Filter input for SalesOrderDetail GraphQL type"""
input SalesOrderDetailFilterInput {
  """Filter options for SalesOrderID"""
  SalesOrderID: IntFilterInput

  """Filter options for SalesOrderDetailID"""
  SalesOrderDetailID: IntFilterInput

  """Filter options for OrderQty"""
  OrderQty: ShortFilterInput

  """Filter options for ProductID"""
  ProductID: IntFilterInput

  """Filter options for UnitPrice"""
  UnitPrice: DecimalFilterInput

  """Filter options for UnitPriceDiscount"""
  UnitPriceDiscount: DecimalFilterInput

  """Filter options for rowguid"""
  rowguid: UuidFilterInput

  """Filter options for ModifiedDate"""
  ModifiedDate: DateTimeFilterInput

  """Conditions to be treated as AND operations"""
  and: [SalesOrderDetailFilterInput]

  """Conditions to be treated as OR operations"""
  or: [SalesOrderDetailFilterInput]
}

"""Input type for updating Product"""
input UpdateProductInput {
  """Input for field Name on type UpdateProductInput"""
  Name: String

  """Input for field ProductNumber on type UpdateProductInput"""
  ProductNumber: String

  """Input for field Color on type UpdateProductInput"""
  Color: String

  """Input for field StandardCost on type UpdateProductInput"""
  StandardCost: Decimal

  """Input for field ListPrice on type UpdateProductInput"""
  ListPrice: Decimal

  """Input for field Size on type UpdateProductInput"""
  Size: String

  """Input for field Weight on type UpdateProductInput"""
  Weight: Decimal

  """Input for field ProductCategoryID on type UpdateProductInput"""
  ProductCategoryID: Int

  """Input for field ProductModelID on type UpdateProductInput"""
  ProductModelID: Int

  """Input for field SellStartDate on type UpdateProductInput"""
  SellStartDate: DateTime

  """Input for field SellEndDate on type UpdateProductInput"""
  SellEndDate: DateTime

  """Input for field DiscontinuedDate on type UpdateProductInput"""
  DiscontinuedDate: DateTime

  """Input for field ThumbNailPhoto on type UpdateProductInput"""
  ThumbNailPhoto: ByteArray

  """Input for field ThumbnailPhotoFileName on type UpdateProductInput"""
  ThumbnailPhotoFileName: String

  """Input for field rowguid on type UpdateProductInput"""
  rowguid: UUID

  """Input for field ModifiedDate on type UpdateProductInput"""
  ModifiedDate: DateTime
}

"""Input type for updating ProductModelProductDescription"""
input UpdateProductModelProductDescriptionInput {
  """
  Input for field ProductModelID on type UpdateProductModelProductDescriptionInput
  """
  ProductModelID: Int

  """
  Input for field ProductDescriptionID on type UpdateProductModelProductDescriptionInput
  """
  ProductDescriptionID: Int

  """
  Input for field Culture on type UpdateProductModelProductDescriptionInput
  """
  Culture: String

  """
  Input for field rowguid on type UpdateProductModelProductDescriptionInput
  """
  rowguid: UUID

  """
  Input for field ModifiedDate on type UpdateProductModelProductDescriptionInput
  """
  ModifiedDate: DateTime
}

"""Fields available for aggregation in SalesOrderHeader"""
enum SalesOrderHeaderNumericAggregateFields {
  SalesOrderID
  RevisionNumber
  Status
  CustomerID
  ShipToAddressID
  BillToAddressID
  SubTotal
  TaxAmt
  Freight
}

"""Input type for adding Short filters"""
input ShortFilterInput {
  """Equals"""
  eq: Short

  """Greater Than"""
  gt: Short

  """Greater Than or Equal To"""
  gte: Short

  """Less Than"""
  lt: Short

  """Less Than or Equal To"""
  lte: Short

  """Not Equals"""
  neq: Short

  """Not null test"""
  isNull: Boolean

  """In"""
  in: [Short]
}

"""Scalar fields available in ProductModelProductDescription"""
enum ProductModelProductDescriptionScalarFields {
  ProductModelID
  ProductDescriptionID
  Culture
  rowguid
  ModifiedDate
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type AddressConnection {
  """The list of items that matched the filter"""
  items: [Address!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [AddressScalarFields!]
  ): [AddressGroupBy!]!
}

"""
The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255.
"""
scalar Byte

"""GroupBy type for Address"""
type AddressGroupBy {
  """Grouped fields from Address"""
  fields: Address

  """Aggregations for Address"""
  aggregations: AddressAggregations
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

"""Aggregation type for ProductDescription"""
type ProductDescriptionAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: ProductDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: ProductDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: ProductDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: ProductDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: ProductDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""Defines when a policy shall be executed."""
enum ApplyPolicy {
  """Before the resolver was executed."""
  BEFORE_RESOLVER

  """After the resolver was executed."""
  AFTER_RESOLVER

  """The policy is applied in the validation step before the execution."""
  VALIDATION
}

"""Order by input for BuildVersion GraphQL type"""
input BuildVersionOrderByInput {
  """Order by options for SystemInformationID"""
  SystemInformationID: OrderBy

  """Order by options for DatabaseVersion"""
  DatabaseVersion: OrderBy

  """Order by options for VersionDate"""
  VersionDate: OrderBy

  """Order by options for ModifiedDate"""
  ModifiedDate: OrderBy
}

"""Aggregation type for Product"""
type ProductAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: ProductNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: ProductNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: ProductNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: ProductNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: ProductNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""Aggregation type for SalesOrderDetail"""
type SalesOrderDetailAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: SalesOrderDetailNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: SalesOrderDetailNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: SalesOrderDetailNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: SalesOrderDetailNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: SalesOrderDetailNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: DecimalFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type ErrorLogConnection {
  """The list of items that matched the filter"""
  items: [ErrorLog!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [ErrorLogScalarFields!]
  ): [ErrorLogGroupBy!]!
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type SalesOrderDetailConnection {
  """The list of items that matched the filter"""
  items: [SalesOrderDetail!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [SalesOrderDetailScalarFields!]
  ): [SalesOrderDetailGroupBy!]!
}

"""Fields available for aggregation in ProductCategory"""
enum ProductCategoryNumericAggregateFields {
  ProductCategoryID
  ParentProductCategoryID
}

type ProductCategory {
  ProductCategoryID: Int!
  ParentProductCategoryID: Int
  Name: String
  rowguid: UUID!
  ModifiedDate: DateTime!
}

"""Order by input for ProductModel GraphQL type"""
input ProductModelOrderByInput {
  """Order by options for ProductModelID"""
  ProductModelID: OrderBy

  """Order by options for Name"""
  Name: OrderBy

  """Order by options for rowguid"""
  rowguid: OrderBy

  """Order by options for ModifiedDate"""
  ModifiedDate: OrderBy
}

"""Filter input for CustomerAddress GraphQL type"""
input CustomerAddressFilterInput {
  """Filter options for CustomerID"""
  CustomerID: IntFilterInput

  """Filter options for AddressID"""
  AddressID: IntFilterInput

  """Filter options for AddressType"""
  AddressType: StringFilterInput

  """Filter options for rowguid"""
  rowguid: UuidFilterInput

  """Filter options for ModifiedDate"""
  ModifiedDate: DateTimeFilterInput

  """Conditions to be treated as AND operations"""
  and: [CustomerAddressFilterInput]

  """Conditions to be treated as OR operations"""
  or: [CustomerAddressFilterInput]
}

"""GroupBy type for ProductModel"""
type ProductModelGroupBy {
  """Grouped fields from ProductModel"""
  fields: ProductModel

  """Aggregations for ProductModel"""
  aggregations: ProductModelAggregations
}

"""The `Decimal` scalar type represents a decimal floating-point number."""
scalar Decimal

"""Filter input for Address GraphQL type"""
input AddressFilterInput {
  """Filter options for AddressID"""
  AddressID: IntFilterInput

  """Filter options for AddressLine1"""
  AddressLine1: StringFilterInput

  """Filter options for AddressLine2"""
  AddressLine2: StringFilterInput

  """Filter options for City"""
  City: StringFilterInput

  """Filter options for StateProvince"""
  StateProvince: StringFilterInput

  """Filter options for CountryRegion"""
  CountryRegion: StringFilterInput

  """Filter options for PostalCode"""
  PostalCode: StringFilterInput

  """Filter options for rowguid"""
  rowguid: UuidFilterInput

  """Filter options for ModifiedDate"""
  ModifiedDate: DateTimeFilterInput

  """Conditions to be treated as AND operations"""
  and: [AddressFilterInput]

  """Conditions to be treated as OR operations"""
  or: [AddressFilterInput]
}

"""GroupBy type for Product"""
type ProductGroupBy {
  """Grouped fields from Product"""
  fields: Product

  """Aggregations for Product"""
  aggregations: ProductAggregations
}

type Customer {
  CustomerID: Int!
  NameStyle: Boolean
  Title: String
  FirstName: String
  MiddleName: String
  LastName: String
  Suffix: String
  CompanyName: String
  SalesPerson: String
  EmailAddress: String
  Phone: String
  PasswordHash: String!
  PasswordSalt: String!
  rowguid: UUID!
  ModifiedDate: DateTime!
}

type vProductAndDescription {
  ProductID: Int!
  Name: String
  ProductModel: String
  Culture: String!
  Description: String!
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type BuildVersionConnection {
  """The list of items that matched the filter"""
  items: [BuildVersion!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [BuildVersionScalarFields!]
  ): [BuildVersionGroupBy!]!
}

"""Input type for creating ProductDescription"""
input CreateProductDescriptionInput {
  """Input for field Description on type CreateProductDescriptionInput"""
  Description: String!

  """Input for field rowguid on type CreateProductDescriptionInput"""
  rowguid: UUID = "(newid())"

  """Input for field ModifiedDate on type CreateProductDescriptionInput"""
  ModifiedDate: DateTime = "(getdate())"
}

"""Input type for updating Customer"""
input UpdateCustomerInput {
  """Input for field NameStyle on type UpdateCustomerInput"""
  NameStyle: Boolean

  """Input for field Title on type UpdateCustomerInput"""
  Title: String

  """Input for field FirstName on type UpdateCustomerInput"""
  FirstName: String

  """Input for field MiddleName on type UpdateCustomerInput"""
  MiddleName: String

  """Input for field LastName on type UpdateCustomerInput"""
  LastName: String

  """Input for field Suffix on type UpdateCustomerInput"""
  Suffix: String

  """Input for field CompanyName on type UpdateCustomerInput"""
  CompanyName: String

  """Input for field SalesPerson on type UpdateCustomerInput"""
  SalesPerson: String

  """Input for field EmailAddress on type UpdateCustomerInput"""
  EmailAddress: String

  """Input for field Phone on type UpdateCustomerInput"""
  Phone: String

  """Input for field PasswordHash on type UpdateCustomerInput"""
  PasswordHash: String

  """Input for field PasswordSalt on type UpdateCustomerInput"""
  PasswordSalt: String

  """Input for field rowguid on type UpdateCustomerInput"""
  rowguid: UUID

  """Input for field ModifiedDate on type UpdateCustomerInput"""
  ModifiedDate: DateTime
}

"""GroupBy type for ProductModelProductDescription"""
type ProductModelProductDescriptionGroupBy {
  """Grouped fields from ProductModelProductDescription"""
  fields: ProductModelProductDescription

  """Aggregations for ProductModelProductDescription"""
  aggregations: ProductModelProductDescriptionAggregations
}

"""Filter input for Customer GraphQL type"""
input CustomerFilterInput {
  """Filter options for CustomerID"""
  CustomerID: IntFilterInput

  """Filter options for NameStyle"""
  NameStyle: BooleanFilterInput

  """Filter options for Title"""
  Title: StringFilterInput

  """Filter options for FirstName"""
  FirstName: StringFilterInput

  """Filter options for MiddleName"""
  MiddleName: StringFilterInput

  """Filter options for LastName"""
  LastName: StringFilterInput

  """Filter options for Suffix"""
  Suffix: StringFilterInput

  """Filter options for CompanyName"""
  CompanyName: StringFilterInput

  """Filter options for SalesPerson"""
  SalesPerson: StringFilterInput

  """Filter options for EmailAddress"""
  EmailAddress: StringFilterInput

  """Filter options for Phone"""
  Phone: StringFilterInput

  """Filter options for PasswordHash"""
  PasswordHash: StringFilterInput

  """Filter options for PasswordSalt"""
  PasswordSalt: StringFilterInput

  """Filter options for rowguid"""
  rowguid: UuidFilterInput

  """Filter options for ModifiedDate"""
  ModifiedDate: DateTimeFilterInput

  """Conditions to be treated as AND operations"""
  and: [CustomerFilterInput]

  """Conditions to be treated as OR operations"""
  or: [CustomerFilterInput]
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type ProductConnection {
  """The list of items that matched the filter"""
  items: [Product!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [ProductScalarFields!]
  ): [ProductGroupBy!]!
}

"""GroupBy type for ErrorLog"""
type ErrorLogGroupBy {
  """Grouped fields from ErrorLog"""
  fields: ErrorLog

  """Aggregations for ErrorLog"""
  aggregations: ErrorLogAggregations
}

"""Input type for adding Decimal filters"""
input DecimalFilterInput {
  """Equals"""
  eq: Decimal

  """Greater Than"""
  gt: Decimal

  """Greater Than or Equal To"""
  gte: Decimal

  """Less Than"""
  lt: Decimal

  """Less Than or Equal To"""
  lte: Decimal

  """Not Equals"""
  neq: Decimal

  """Not null test"""
  isNull: Boolean

  """In"""
  in: [Decimal]
}

"""
The return object from a filter query that supports a pagination token for paging through results
"""
type vGetAllCategoriesConnection {
  """The list of items that matched the filter"""
  items: [vGetAllCategories!]!

  """A pagination token to provide to subsequent pages of a query"""
  endCursor: String

  """Indicates if there are more pages of items to return"""
  hasNextPage: Boolean!

  """Group results by specified fields"""
  groupBy(
    """Fields to group by"""
    fields: [vGetAllCategoriesScalarFields!]
  ): [vGetAllCategoriesGroupBy!]!
}

"""Filter input for ProductCategory GraphQL type"""
input ProductCategoryFilterInput {
  """Filter options for ProductCategoryID"""
  ProductCategoryID: IntFilterInput

  """Filter options for ParentProductCategoryID"""
  ParentProductCategoryID: IntFilterInput

  """Filter options for Name"""
  Name: StringFilterInput

  """Filter options for rowguid"""
  rowguid: UuidFilterInput

  """Filter options for ModifiedDate"""
  ModifiedDate: DateTimeFilterInput

  """Conditions to be treated as AND operations"""
  and: [ProductCategoryFilterInput]

  """Conditions to be treated as OR operations"""
  or: [ProductCategoryFilterInput]
}

"""Filter input for ErrorLog GraphQL type"""
input ErrorLogFilterInput {
  """Filter options for ErrorLogID"""
  ErrorLogID: IntFilterInput

  """Filter options for ErrorTime"""
  ErrorTime: DateTimeFilterInput

  """Filter options for UserName"""
  UserName: StringFilterInput

  """Filter options for ErrorNumber"""
  ErrorNumber: IntFilterInput

  """Filter options for ErrorSeverity"""
  ErrorSeverity: IntFilterInput

  """Filter options for ErrorState"""
  ErrorState: IntFilterInput

  """Filter options for ErrorProcedure"""
  ErrorProcedure: StringFilterInput

  """Filter options for ErrorLine"""
  ErrorLine: IntFilterInput

  """Filter options for ErrorMessage"""
  ErrorMessage: StringFilterInput

  """Conditions to be treated as AND operations"""
  and: [ErrorLogFilterInput]

  """Conditions to be treated as OR operations"""
  or: [ErrorLogFilterInput]
}

type SalesOrderHeader {
  SalesOrderID: Int!
  RevisionNumber: Byte!
  OrderDate: DateTime!
  DueDate: DateTime!
  ShipDate: DateTime
  Status: Byte!
  OnlineOrderFlag: Boolean
  PurchaseOrderNumber: String
  AccountNumber: String
  CustomerID: Int!
  ShipToAddressID: Int
  BillToAddressID: Int
  ShipMethod: String!
  CreditCardApprovalCode: String
  SubTotal: Decimal!
  TaxAmt: Decimal!
  Freight: Decimal!
  Comment: String
  rowguid: UUID!
  ModifiedDate: DateTime!
}

"""Aggregation type for ProductModelProductDescription"""
type ProductModelProductDescriptionAggregations {
  """Maximum value for numeric fields"""
  max(
    """Field to aggregate on"""
    field: ProductModelProductDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Minimum value for numeric fields"""
  min(
    """Field to aggregate on"""
    field: ProductModelProductDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Average value"""
  avg(
    """Field to aggregate on"""
    field: ProductModelProductDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Sum of values"""
  sum(
    """Field to aggregate on"""
    field: ProductModelProductDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Float

  """Count of numeric values"""
  count(
    """Field to aggregate on"""
    field: ProductModelProductDescriptionNumericAggregateFields!

    """Filter criteria for aggregation"""
    having: IntFilterInput

    """Whether to aggregate on distinct values"""
    distinct: Boolean = false
  ): Int
}

"""GroupBy type for vGetAllCategories"""
type vGetAllCategoriesGroupBy {
  """Grouped fields from vGetAllCategories"""
  fields: vGetAllCategories

  """Aggregations for vGetAllCategories"""
  aggregations: vGetAllCategoriesAggregations
}